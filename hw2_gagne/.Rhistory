ls
5 + 6
5 + 6
6 * 8
1:100000
x <- 8 # this is a numeric variable
y <- 6
z <- 'cat' # this is called a 'string' variable. they always need quotation marks.
x + y
x + z
x <- 7
x <- Null
x^x
X + x
c(1, 2, 4, 5, 7) # combine
x <- c(1, 2, 4, 5, 7) # works for numeric variables
x
x + x
x * x
y <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat') # also works for string variables
y + y
z <- 1:100
z
z <- c(1:100) # many, many things can be done multiple ways in R.
long.annoying.variable.that.i.came.up.with <- c('dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog','dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog','dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog','dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog','dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog')
long <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat')
long ## YEAH!!!
long.annoying.variable.that.i.came.up.with <- c('dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog','dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog','dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog','dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog','dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog')
long.annoying.variable.that.i.came.up.with
# R doesn't know that you're human. so some things aren't designed for humans. for example,
# R doesn't have a line wrap feature, so you can keep typing, and typing, and typing, and
# typing. This is kind of annoying for humans to read (although computers, since they are
# more powerful, don't really care.)
# so it's nice to break up lines. 90 characters or so is a good number, but this isn't a
# hard and fast rule. you can look up the number of characters in the bottom left-hand
# corner of the source window. I'm on character 49 right now. oops, 72.
# break up R code at COMMAS. And keep variable names as short and relevant as possible.
long <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat')
long ## YEAH!!!
x <- c(1,2,3,4,5)
length(x) # counts the number of entries in a variable.
class(x)
class(long2)
class(long)
?rep
rep(1, times = 100) # repeats x a certain number of times
x <- c(1,2,3,4,5)
rep(x, times = 100) # if x is length 5, how long should this variable be?
y <- rep(x, times = 100) # we can break this up into steps.
length(y)
length(rep(x, times = 100)) # or we can nest functions within each other
x <- c(1,2,3,4,5)
x <- rep(x, times = 100) #
guess <- rep(x, times = 100) # how long will THIS variable be?
length(guess) # we 'overwrote' the original x <- c(1:5) with a new variable.
long
long1
long2
long2<-long
c(long, long2)
z <- c(long, long2)
x
x[5]
x[5]<-6
x
x[5:10]
data()
data()
?chickwts # whoa, gotta learn more about this...
nrow(chickwts)
names(chickwts) # displays the column names
objects(chickwts)
weight
chickwts$weight
chkn <- chickwts
View(chkn)
View(chkn)
View(chkn)
names(chkwn) <- c("weight", "feed.type")
names(chkn) <- c("weight", "feed.type")
set <- c(4,3,5,1,3,6,7,4,1,2,4,6)
mean(set)
sd(set)
mean(chickwts$weight)
?sd
sum((set-mean(set))^2)/length(set)
median(set)
hist(set) # for continuous data
hist(chickwts$weight)
hist(chickwts$feed.type)
plot(chickwts$feed.type)
plot(chickwts$feed) # use plot to graph categorical data.
hist(chickwts$weight, xlab = 'weight', main = 'MY HISTOGRAM') # like most functions, histogram takes arguments.
hist(chickwts$weight, breaks = 20)
clear
5 + 6
5 + 6
5 + 4
6 * 8
1:100000
1:100000
5 + 6
6 * 8
1:100000
x <- 8
x
y <- 6
y
x + y
x^x
z <- 'cat' # this is called a 'string' variable. they always need quotation marks.
x+y
x+z
X
X + x
c(1, 2, 4, 5, 7) # combine
x <- c(1, 2, 4, 5, 7) # works for numeric variables
x
x + x
x * x
y <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat')
y + y
z <- 1:100
z <- c(1:100)
long.annoying.variable.that.i.came.up.with <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog','cat', 'dog','dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog','dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog','dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog', 'cat', 'dog', 'cat',
'dog','dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog',
'cat', 'dog')
long <- c('dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat',
'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat', 'dog', 'cat')
long ## YEAH!!!
x <- c(1,2,3,4,5)
x
length(x) # counts the number of entries in a variable.
class(x)
class(long)
?rep
rep(1, times = 100) # repeats x a certain number of times
x <- c(1,2,3,4,5)
rep(x, times = 100)
y <- rep(x, times = 100)
length(y)
length(rep(x, times = 100))
x <- c(1,2,3,4,5)
x <- rep(x, times = 100) #
guess <- rep(x, times = 100) # how long will THIS variable be?
x <- c(1,2,3,4,5)
x <- rep(x, times = 100) #
guess <- rep(x, times = 100) # how long will THIS variable be?
length(guess)
long
c(long, long)
x
x[10]
x[11]
x[5:10]
x[5]<-6
x
data()
?chickwts
chkn <- chickwts
View(chkn)
nrow(chickwts)
names(chickwts)
weight
chickwts$weight
names(chkn) <- c("weight", "feed.type")
set <- c(4,3,5,1,3,6,7,4,1,2,4,6)
length(set)
mean(set)
mean(chickwts$weight)
sd(set)
sum((set-mean(set))^2)
sum(set) / length(set)
mean(set)
median(set)
hist(set)
hist(chickwts$weight)
hist(chickwts$feed.type)
plot(chickwts$feed)
hist(chickwts$weight, xlab = 'weight', main = 'MY HISTOGRAM')
hist(chickwts$weight, breaks = 20)
tmp <- "Harry said, \"Hi\""
cat(tmp)
tmp <- "Harry said, \"Hi\".\n"
cat(tmp)
grep("[\\^z]", c("a^2", "93"))
c("a^2", "93")
grep("[\^z]", c("a^2", "93"))
grep("[\\^z]", c("a^2", "93"))
firstname<-"Tim"
lastname<-"Behrens"
profile<-get_profile(firstname,lastname)
source('~/Desktop/stat243/ps2/ps2.R')
source('~/Desktop/stat243/ps2/ps2.R')
URL<-paste("https://scholar.google.com/scholar?q=",firstname,"+",lastname,sep="")
URL
html1 <- readLines(URL,encoding = 'UTF-8')
firstname<-"Tim"
lastname<-"Behrens"
profile<-get_profile(firstname,lastname)
firstname<-"Tim"
lastname<-"Behrens"
profile<-get_profile(firstname,lastname)
firstname<-"David"
lastname<-"Badre"
profile<-get_profile(firstname,lastname)
firstname<-"David"
lastname<-"Badre"
profile<-get_profile(firstname,lastname)
firstname<-"David"
lastname<-"Badre"
profile<-get_profile(firstname,lastname)
setwd("~/Desktop/class_deepRL/hw2_gagne")
myList <- list(list(a = 1:5, b = "sdf"), list(a = 6:10, b = "wer"))
myList
list(a = 1:5, b = "sdf")
list(list(a = 1:5, b = "sdf"), list(a = 6:10, b = "wer"))
nrow(myList)
length(myList)
myMat <- sapply(myList, `[[`, 1)
myMat
myMat <- lapply(myList, `[[`, 1)
myMat
?diag
base::`diag<-`
f <- function() {
f2 <- function() { print(x) }
x <- 7
f2()
}
f() # what will happen?
x<-3
f <- function() {
f2 <- function() { print(x) }
x <- 7
f2()
}
f() # what will happen?
f2 <- function() print(x)
f <- function() {
x <- 7
f2()
}
f() # what will happen?
